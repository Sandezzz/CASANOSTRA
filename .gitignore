# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Casanostra - Planilla Semanal con Productos</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #fafafa;
      padding: 20px;
    }
    h1, h2 {
      text-align: center;
      color: #333;
    }
    .dia {
      background: #fff;
      padding: 15px;
      margin: 15px 0;
      border-radius: 12px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }
    input {
      padding: 6px;
      font-size: 14px;
      margin: 5px;
    }
    button {
      padding: 6px 10px;
      font-size: 14px;
      background: #28a745;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }
    button:hover {
      background: #218838;
    }
    table {
      margin-top: 10px;
      width: 100%;
      border-collapse: collapse;
      font-size: 14px;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 6px;
      text-align: center;
    }
    th {
      background: #f2f2f2;
    }
    .total {
      margin-top: 10px;
      font-weight: bold;
      font-size: 15px;
    }
    .rendimiento {
      background: #d4edda;
      padding: 15px;
      margin-top: 20px;
      border-radius: 12px;
      text-align: center;
      font-size: 18px;
      font-weight: bold;
      border: 2px solid #c3e6cb;
    }
  </style>
</head>
<body>
  <h1>Casanostra - Planilla Semanal</h1>

  <div id="semana"></div>

  <div class="rendimiento">
    Rendimiento Semanal: $<span id="rendimientoSemanal">0</span>
  </div>

  <script>
    const dias = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"];
    let data = {}; // Guarda ventas/gastos de cada día

    function crearDia(dia) {
      const div = document.createElement("div");
      div.className = "dia";
      div.innerHTML = `
        <h2>${dia}</h2>
        
        <!-- Ventas -->
        <input type="text" id="producto-${dia}" placeholder="Producto">
        <input type="number" id="cantidad-${dia}" placeholder="Cantidad" min="1">
        <input type="number" id="precio-${dia}" placeholder="Precio unitario" step="0.01">
        <button onclick="agregarVenta('${dia}')">Agregar Venta</button>
        <br><br>
        
        <!-- Gastos -->
        <input type="text" id="detalleGasto-${dia}" placeholder="Detalle gasto">
        <input type="number" id="gasto-${dia}" placeholder="Monto gasto">
        <button onclick="agregarGasto('${dia}')">Agregar Gasto</button>

        <!-- Tabla ventas -->
        <h3>Ventas</h3>
        <table id="tablaVentas-${dia}">
          <thead>
            <tr>
              <th>#</th>
              <th>Producto</th>
              <th>Cantidad</th>
              <th>Precio Unitario</th>
              <th>Subtotal</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>

        <!-- Tabla gastos -->
        <h3>Gastos</h3>
        <table id="tablaGastos-${dia}">
          <thead>
            <tr>
              <th>#</th>
              <th>Detalle</th>
              <th>Monto</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>

        <!-- Totales -->
        <div class="total">Total Ventas: $<span id="ventas-${dia}">0</span></div>
        <div class="total">Total Gastos: $<span id="gastos-${dia}">0</span></div>
        <div class="total">Balance del día: $<span id="balance-${dia}">0</span></div>
      `;
      document.getElementById("semana").appendChild(div);

      // Inicializamos datos del día
      data[dia] = { ventas: [], gastos: [], totalVentas: 0, totalGastos: 0, balance: 0 };
    }

    // Crear los 7 días
    dias.forEach(dia => crearDia(dia));

    function agregarVenta(dia) {
      const producto = document.getElementById(`producto-${dia}`).value.trim();
      const cantidad = parseInt(document.getElementById(`cantidad-${dia}`).value);
      const precio = parseFloat(document.getElementById(`precio-${dia}`).value);

      if (producto && !isNaN(cantidad) && cantidad > 0 && !isNaN(precio) && precio > 0) {
        const subtotal = cantidad * precio;
        data[dia].ventas.push({ producto, cantidad, precio, subtotal });
        data[dia].totalVentas += subtotal;
        actualizarTablaVentas(dia);
        actualizarTotales(dia);

        document.getElementById(`producto-${dia}`).value = "";
        document.getElementById(`cantidad-${dia}`).value = "";
        document.getElementById(`precio-${dia}`).value = "";
      } else {
        alert("Complete todos los datos de la venta correctamente");
      }
    }

    function agregarGasto(dia) {
      const detalle = document.getElementById(`detalleGasto-${dia}`).value.trim();
      const monto = parseFloat(document.getElementById(`gasto-${dia}`).value);

      if (detalle && !isNaN(monto) && monto > 0) {
        data[dia].gastos.push({ detalle, monto });
        data[dia].totalGastos += monto;
        actualizarTablaGastos(dia);
        actualizarTotales(dia);

        document.getElementById(`detalleGasto-${dia}`).value = "";
        document.getElementById(`gasto-${dia}`).value = "";
      } else {
        alert("Complete el gasto correctamente");
      }
    }

    function actualizarTablaVentas(dia) {
      const tbody = document.getElementById(`tablaVentas-${dia}`).getElementsByTagName("tbody")[0];
      tbody.innerHTML = "";

      data[dia].ventas.forEach((venta, i) => {
        const fila = tbody.insertRow();
        fila.insertCell(0).innerText = i + 1;
        fila.insertCell(1).innerText = venta.producto;
        fila.insertCell(2).innerText = venta.cantidad;
        fila.insertCell(3).innerText = "$ " + venta.precio.toFixed(2);
        fila.insertCell(4).innerText = "$ " + venta.subtotal.toFixed(2);
      });
    }

    function actualizarTablaGastos(dia) {
      const tbody = document.getElementById(`tablaGastos-${dia}`).getElementsByTagName("tbody")[0];
      tbody.innerHTML = "";

      data[dia].gastos.forEach((gasto, i) => {
        const fila = tbody.insertRow();
        fila.insertCell(0).innerText = i + 1;
        fila.insertCell(1).innerText = gasto.detalle;
        fila.insertCell(2).innerText = "$ " + gasto.monto.toFixed(2);
      });
    }

    function actualizarTotales(dia) {
      const balance = data[dia].totalVentas - data[dia].totalGastos;
      data[dia].balance = balance;

      document.getElementById(`ventas-${dia}`).innerText = data[dia].totalVentas.toFixed(2);
      document.getElementById(`gastos-${dia}`).innerText = data[dia].totalGastos.toFixed(2);
      document.getElementById(`balance-${dia}`).innerText = balance.toFixed(2);

      calcularRendimientoSemanal();
    }

    function calcularRendimientoSemanal() {
      let total = 0;
      dias.forEach(dia => total += data[dia].bala
